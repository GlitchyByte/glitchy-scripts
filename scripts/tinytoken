#!/usr/bin/env bash
# Copyright 2021-2023 GlitchyByte
# SPDX-License-Identifier: MIT

# tinytoken v1.0.1
set -u # Exit with an error if a variable is used without being set.

# Generate a time-based code.
# Unique per project as long as it's used with the same salt.
readonly salt="$1"

# ---- BEGIN SECTION ----
# CRC32 in bash.
# This section is taken from http://rosettacode.org/wiki/CRC-32#Bash
# and is not part of the file license.

declare -i -a CRC32_LOOKUP_TABLE

__generate_crc_lookup_table() {
  local -i -r LSB_CRC32_POLY=0xEDB88320 # The CRC32 polynomal LSB order
  local -i index byte lsb
  for index in {0..255}; do
    ((byte = 255 - index))
    for _ in {0..7}; do # 8-bit lsb shift
      ((lsb = byte & 0x01, byte = ((byte >> 1) & 0x7FFFFFFF) ^ (lsb == 0 ? LSB_CRC32_POLY : 0)))
    done
    ((CRC32_LOOKUP_TABLE[index] = byte))
  done
}
__generate_crc_lookup_table
typeset -r CRC32_LOOKUP_TABLE

crc32_string() {
  [[ ${#} -eq 1 ]] || return
  local -i i byte crc=0xFFFFFFFF index
  for ((i = 0; i < ${#1}; i++)); do
    byte=$(printf '%d' "'${1:i:1}") # Get byte value of character at i
    ((index = (crc ^ byte) & 0xFF, crc = (CRC32_LOOKUP_TABLE[index] ^ (crc >> 8)) & 0xFFFFFFFF))
  done
  echo $((crc ^ 0xFFFFFFFF))
}

# ---- END SECTION ----

# Seed random with salt.
readonly RANDOM=$(crc32_string "$salt")

# Define character set.
# charset='0123456789abcdefghijklmnopqrstuvwxyz'
readonly charset='bcdfghjkmpqrstvwx246789'
readonly charset_length=${#charset}

# Get time in seconds.
# We'll be using 30 bits only (over 30 years time) as it is enough for the lifetime of anybody reasonably using this.
# If it's the year 2050 and you are still using this, you took a wrong turn in life. Increase bit_count, or reset zero_time.
readonly zero_time=1609459200 # First instant of 2021.
readonly bit_count=30
readonly max_bit=$((bit_count - 1))
readonly timestamp=$((($(date +%s) - zero_time) & (2**bit_count - 1)))

# Scramble bits.
readonly bit_seq=$(seq 0 $max_bit)
scrambled_bits=($bit_seq)
for i in $(seq $max_bit -1 1); do
  rnd=$((RANDOM%(i + 1)))
  tmp=${scrambled_bits[$i]}
  scrambled_bits[$i]=${scrambled_bits[$rnd]}
  scrambled_bits[$rnd]=$tmp
done
# echo "${scrambled_bits[@]}"

# Scramble timestamp bits.
scrambled_stamp=0
for i in $bit_seq; do
  bit=$(((timestamp & (1 << i)) >> i))
  placed_bit=$((bit << ${scrambled_bits[$i]}))
  scrambled_stamp=$((scrambled_stamp | placed_bit))
done

# echo $(echo "obase=2; $scrambled_stamp" | bc)

# Convert number to base charset_length.
# indexes="$(echo "ibase=10; obase=16; $scrambled_stamp" | bc)"
# echo $indexes
readonly indexes="$(echo "ibase=10; obase=$charset_length; $scrambled_stamp" | bc)"

# Translate digits into charset.
code=''
for token in $indexes; do
  index=$(echo "$token" | bc)
  code="$code${charset:$index:1}"
done

# Output code.
echo $code
